{"version":3,"sources":["DogeVilleLogo.png","components/App.js","serviceWorker.js","index.js","dollar.png"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","account","token","totalSupply","totalFees","totalDividendsDistributed","accountTotalDividendsReceived","accountNextPayout","totalHolders","balanceOf","tokenURIs","cardArray","cardsChosen","cardsChosenId","cardsWon","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","console","log","abi","DogeVilleToken","Contract","methods","getTotalDividendsDistributed","utils","fromWei","toString","parseFloat","toFixed","getAccountDividendsInfo","accountDividendsInfo","adjustedDividends","getNumberOfDividendTokenHolders","parseInt","react_default","a","createElement","className","class","src","DogeVilleLogo","width","height","alt","id","DollarLogo","Component","addEventListener","document","getElementById","Boolean","location","hostname","match","ReactDOM","render","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04936eb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DogeVilleLogo.97c650c2.png\";","import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport DogeVilleToken from '../abis/DogeVille.json'\r\nimport DogeVilleLogo from '../DogeVilleLogo.png'\r\nimport DollarLogo from '../dollar.png'\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n    //this.setState({ cardArray: CARD_ARRAY.sort(() => 0.5 - Math.random()) })\r\n  }\r\n\r\n  async testFunction(){\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n\r\n  }\r\n\r\n\r\nasync loadBlockchainData() {\r\n  const web3 = window.web3\r\n  const accounts = await web3.eth.getAccounts()\r\n  this.setState({ account: accounts[0] })\r\n\r\n  // Load smart contract\r\n  const networkId = await web3.eth.net.getId()\r\n  console.log(networkId);\r\n  //const networkData = MemoryToken.networks[networkId]\r\n  if(networkId === 56) {\r\n    const abi = DogeVilleToken.abi\r\n    const address = \"0xd3b6bFd18b34AE0E3165738bf66eBC64Cad1B944\"\r\n    const token = new web3.eth.Contract(abi, address)\r\n    this.setState({ token })\r\n    console.log(token)\r\n    const totalSupply = await token.methods.totalSupply().call()\r\n    const totalFees = await token.methods.totalFees().call()\r\n    var totalDividendsDistributed = await token.methods.getTotalDividendsDistributed().call()\r\n    totalDividendsDistributed = web3.utils.fromWei(totalDividendsDistributed.toString(), \"ether\").toString()\r\n    totalDividendsDistributed = parseFloat(totalDividendsDistributed).toFixed(2).toString()\r\n    \r\n\r\n    const accountDividendsInfo = await token.methods.getAccountDividendsInfo(accounts[0]).call()\r\n    const adjustedDividends = accountDividendsInfo[4] - accountDividendsInfo[3]             // Function from contract return the current amount of dividends in wallet + the dividends it will receive in an hour.\r\n    var accountTotalDividendsReceived = web3.utils.fromWei(adjustedDividends.toString(),\"ether\").toString()\r\n    //accountTotalDividendsReceived = parseInt(accountTotalDividendsReceived, 10).toString()\r\n    accountTotalDividendsReceived = parseFloat(accountTotalDividendsReceived).toFixed(2).toString()\r\n  \r\n    var accountNextPayout = web3.utils.fromWei(accountDividendsInfo[3].toString(),\"ether\").toString()\r\n    accountNextPayout = parseFloat(accountNextPayout).toFixed(3).toString()\r\n    console.log(accountNextPayout)\r\n    const totalHolders = await token.methods.getNumberOfDividendTokenHolders().call()\r\n\r\n    var balanceOf = await token.methods.balanceOf(accounts[0]).call()\r\n    balanceOf = web3.utils.fromWei(balanceOf.toString(),\"ether\").toString()\r\n    balanceOf = parseInt(balanceOf, 10).toString();\r\n\r\n    this.setState({ totalSupply })\r\n    this.setState({ totalFees })\r\n    this.setState({ balanceOf })\r\n    this.setState({totalHolders})\r\n    this.setState({accountTotalDividendsReceived})\r\n    this.setState({totalDividendsDistributed})\r\n    this.setState({accountNextPayout})\r\n    // Load Tokens\r\n    //let balanceOf = await token.methods.balanceOf(accounts[0]).call()\r\n  } else {\r\n    alert('Smart contract not deployed to detected network.')\r\n  }\r\n}\r\n\r\n  \r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '0x0',\r\n      token: null,\r\n      totalSupply: 0,\r\n      totalFees: 0,\r\n      totalDividendsDistributed:0,\r\n      accountTotalDividendsReceived: 0,\r\n      accountNextPayout:0 ,\r\n      totalHolders:0,\r\n      balanceOf: 0,\r\n      tokenURIs: [],\r\n      cardArray: [],\r\n      cardsChosen: [],\r\n      cardsChosenId: [],\r\n      cardsWon: []\r\n    }\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"background\" >\r\n                 \r\n      <div class=\"jumbotron d-flex align-items-center min-vh-100\">\r\n        <div class=\"container-fluid \">\r\n\r\n        <div class=\"row py-2\">\r\n          <div class=\"col-sm\">\r\n          <figure class=\"text-center\">\r\n          <h1><strong></strong></h1>\r\n          </figure>\r\n          </div>\r\n\r\n        <div class=\"col-sm\">\r\n        <figure class=\"text-center\">\r\n        </figure>  \r\n        </div>\r\n        <div class=\"col-sm\">\r\n        <figure class=\"text-center\">\r\n          <h1><strong></strong></h1>\r\n          </figure>\r\n          </div>\r\n      </div>\r\n\r\n          <div class=\"row py-5\">\r\n          <div class=\"col-sm bg-white border border-dark border-3 rounded-pill\">\r\n          <figure class=\"text-center\">\r\n          <img src={DogeVilleLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\r\n          <h4><span id=\"result\">&nbsp;{this.state.totalHolders.toString()}</span></h4>\r\n          <h3><strong>Token holders</strong></h3>\r\n          <h1> </h1>\r\n          </figure>\r\n          </div>\r\n\r\n        <div class=\"col-sm\">\r\n        <figure class=\"text-center\">\r\n        </figure>  \r\n        </div>\r\n        <div class=\"col-sm bg-white border border-dark border-3 rounded-pill\">\r\n          <figure class=\"text-center\">\r\n          <img src={DogeVilleLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\r\n          <h4><span id=\"result\">&nbsp;{this.state.balanceOf.toString()}</span></h4>\r\n          <h3><strong>Your token balance</strong></h3>\r\n          <h1> </h1>\r\n          </figure>\r\n          </div>\r\n      </div>\r\n\r\n  <div class=\"row py-5\">\r\n  <div class=\"col-sm bg-white border border-dark border-1 border rounded-pill\">\r\n    <figure class=\"text-center\">\r\n    <img src={DollarLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\r\n      <h4><span id=\"result\">&nbsp;{this.state.totalDividendsDistributed.toString()}</span></h4>\r\n      <h3><strong>Total dividens distributed</strong></h3>\r\n    </figure>\r\n      </div>\r\n    <div class=\"col-sm\">\r\n    <figure class=\"text-center\">\r\n      \r\n    </figure>  \r\n    </div>\r\n    <div class=\"col-sm bg-white border border-dark border-1 border rounded-pill\">\r\n    <figure class=\"text-center\">\r\n    <img src={DollarLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\r\n      <h4><span id=\"result\">&nbsp;{this.state.accountTotalDividendsReceived.toString()}</span></h4>\r\n      <h3><strong>Your dividends received</strong></h3>\r\n    </figure>\r\n      </div>\r\n  </div>\r\n\r\n  <div class=\"row py-5\">\r\n  <div class=\"col-sm \">\r\n    <figure class=\"text-center\">\r\n\r\n    </figure>\r\n      </div>\r\n    <div class=\"col-sm\">\r\n    <figure class=\"text-center\">\r\n      \r\n    </figure>  \r\n    </div>\r\n    <div class=\"col-sm bg-white border border-dark border-1 border rounded-pill\">\r\n    <figure class=\"text-center\">\r\n    <img src={DollarLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\r\n      <h4><span id=\"result\">&nbsp;{this.state.accountNextPayout.toString()}</span></h4>\r\n      <h3><strong>Your next payout</strong></h3>\r\n    </figure>\r\n      </div>\r\n  </div>\r\n\r\n  \r\n</div>\r\n</div>\r\n\r\n\r\n\r\n</div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  const metaMaskLoginButton = document.getElementById('metaMaskLoginButton')\r\n  const manualLoginButton = document.getElementById('manualLoginButton')\r\n});\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/dollar.44636026.png\";"],"sourceRoot":""}