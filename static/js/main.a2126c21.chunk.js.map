{"version":3,"sources":["DogeVilleLogo.png","components/App.js","serviceWorker.js","index.js","dollar.png"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","account","token","totalSupply","totalFees","totalDividendsDistributed","accountTotalDividendsReceived","accountNextPayout","totalHolders","balanceOf","tokenURIs","cardArray","cardsChosen","cardsChosenId","cardsWon","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","console","log","abi","DogeVilleToken","Contract","methods","getTotalDividendsDistributed","utils","fromWei","toString","parseFloat","toFixed","getAccountDividendsInfo","accountDividendsInfo","adjustedDividends","getNumberOfDividendTokenHolders","parseInt","react_default","a","createElement","className","class","src","DogeVilleLogo","width","height","alt","id","DollarLogo","Component","addEventListener","document","getElementById","Boolean","location","hostname","match","ReactDOM","render","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2126c21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DogeVilleLogo.97c650c2.png\";","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport DogeVilleToken from '../abis/DogeVille.json'\nimport DogeVilleLogo from '../DogeVilleLogo.png'\nimport DollarLogo from '../dollar.png'\n\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n    //this.setState({ cardArray: CARD_ARRAY.sort(() => 0.5 - Math.random()) })\n  }\n\n  async testFunction(){\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n\n  }\n\n\nasync loadBlockchainData() {\n  const web3 = window.web3\n  const accounts = await web3.eth.getAccounts()\n  this.setState({ account: accounts[0] })\n\n  // Load smart contract\n  const networkId = await web3.eth.net.getId()\n  console.log(networkId);\n  //const networkData = MemoryToken.networks[networkId]\n  if(networkId === 56) {\n    const abi = DogeVilleToken.abi\n    const address = \"0xd3b6bFd18b34AE0E3165738bf66eBC64Cad1B944\"\n    const token = new web3.eth.Contract(abi, address)\n    this.setState({ token })\n    console.log(token)\n    const totalSupply = await token.methods.totalSupply().call()\n    const totalFees = await token.methods.totalFees().call()\n    var totalDividendsDistributed = await token.methods.getTotalDividendsDistributed().call()\n    totalDividendsDistributed = web3.utils.fromWei(totalDividendsDistributed.toString(), \"ether\").toString()\n    totalDividendsDistributed = parseFloat(totalDividendsDistributed).toFixed(2).toString()\n    \n\n    const accountDividendsInfo = await token.methods.getAccountDividendsInfo(accounts[0]).call()\n    const adjustedDividends = accountDividendsInfo[4] - accountDividendsInfo[3]             // Function from contract return the current amount of dividends in wallet + the dividends it will receive in an hour.\n    var accountTotalDividendsReceived = web3.utils.fromWei(adjustedDividends.toString(),\"ether\").toString()\n    //accountTotalDividendsReceived = parseInt(accountTotalDividendsReceived, 10).toString()\n    accountTotalDividendsReceived = parseFloat(accountTotalDividendsReceived).toFixed(2).toString()\n  \n    var accountNextPayout = web3.utils.fromWei(accountDividendsInfo[3].toString(),\"ether\").toString()\n    accountNextPayout = parseFloat(accountNextPayout).toFixed(3).toString()\n    console.log(accountNextPayout)\n    const totalHolders = await token.methods.getNumberOfDividendTokenHolders().call()\n\n    var balanceOf = await token.methods.balanceOf(accounts[0]).call()\n    balanceOf = web3.utils.fromWei(balanceOf.toString(),\"ether\").toString()\n    balanceOf = parseInt(balanceOf, 10).toString();\n\n    this.setState({ totalSupply })\n    this.setState({ totalFees })\n    this.setState({ balanceOf })\n    this.setState({totalHolders})\n    this.setState({accountTotalDividendsReceived})\n    this.setState({totalDividendsDistributed})\n    this.setState({accountNextPayout})\n    // Load Tokens\n    //let balanceOf = await token.methods.balanceOf(accounts[0]).call()\n  } else {\n    alert('Smart contract not deployed to detected network.')\n  }\n}\n\n  \n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      token: null,\n      totalSupply: 0,\n      totalFees: 0,\n      totalDividendsDistributed:0,\n      accountTotalDividendsReceived: 0,\n      accountNextPayout:0 ,\n      totalHolders:0,\n      balanceOf: 0,\n      tokenURIs: [],\n      cardArray: [],\n      cardsChosen: [],\n      cardsChosenId: [],\n      cardsWon: []\n    }\n  }\n\n  \n  render() {\n    return (\n      <div className=\"background\" >\n                 \n      <div class=\"jumbotron d-flex align-items-center min-vh-100\">\n        <div class=\"container-fluid \">\n\n        <div class=\"row py-2\">\n          <div class=\"col-sm\">\n          <figure class=\"text-center\">\n          <h1><strong></strong></h1>\n          </figure>\n          </div>\n\n        <div class=\"col-sm\">\n        <figure class=\"text-center\">\n        </figure>  \n        </div>\n        <div class=\"col-sm\">\n        <figure class=\"text-center\">\n          <h1><strong></strong></h1>\n          </figure>\n          </div>\n      </div>\n\n          <div class=\"row py-5\">\n          <div class=\"col-sm bg-white border border-dark border-3 rounded-pill\">\n          <figure class=\"text-center\">\n          <img src={DogeVilleLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\n          <h4><span id=\"result\">&nbsp;{this.state.totalHolders.toString()}</span></h4>\n          <h3><strong>Token holders</strong></h3>\n          <h1> </h1>\n          </figure>\n          </div>\n\n        <div class=\"col-sm\">\n        <figure class=\"text-center\">\n        </figure>  \n        </div>\n        <div class=\"col-sm bg-white border border-dark border-3 rounded-pill\">\n          <figure class=\"text-center\">\n          <img src={DogeVilleLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\n          <h4><span id=\"result\">&nbsp;{this.state.balanceOf.toString()}</span></h4>\n          <h3><strong>Your token balance</strong></h3>\n          <h1> </h1>\n          </figure>\n          </div>\n      </div>\n\n  <div class=\"row py-5\">\n  <div class=\"col-sm bg-white border border-dark border-1 border rounded-pill\">\n    <figure class=\"text-center\">\n    <img src={DollarLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\n      <h4><span id=\"result\">&nbsp;{this.state.totalDividendsDistributed.toString()}</span></h4>\n      <h3><strong>Total dividens distributed</strong></h3>\n    </figure>\n      </div>\n    <div class=\"col-sm\">\n    <figure class=\"text-center\">\n      \n    </figure>  \n    </div>\n    <div class=\"col-sm bg-white border border-dark border-1 border rounded-pill\">\n    <figure class=\"text-center\">\n    <img src={DollarLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\n      <h4><span id=\"result\">&nbsp;{this.state.accountTotalDividendsReceived.toString()}</span></h4>\n      <h3><strong>Your dividends received</strong></h3>\n    </figure>\n      </div>\n  </div>\n\n  <div class=\"row py-5\">\n  <div class=\"col-sm \">\n    <figure class=\"text-center\">\n\n    </figure>\n      </div>\n    <div class=\"col-sm\">\n    <figure class=\"text-center\">\n      \n    </figure>  \n    </div>\n    <div class=\"col-sm bg-white border border-dark border-1 border rounded-pill\">\n    <figure class=\"text-center\">\n    <img src={DollarLogo} width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\" />\n      <h4><span id=\"result\">&nbsp;{this.state.accountNextPayout.toString()}</span></h4>\n      <h3><strong>Your next payout</strong></h3>\n    </figure>\n      </div>\n  </div>\n\n  \n</div>\n</div>\n\n\n\n</div>\n    );\n  }\n\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const metaMaskLoginButton = document.getElementById('metaMaskLoginButton')\n  const manualLoginButton = document.getElementById('manualLoginButton')\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/dollar.44636026.png\";"],"sourceRoot":""}